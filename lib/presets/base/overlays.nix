# Passing in inputs like this allows us to more easily compose flakes by
# building up values from inputs in a convenient manner.
{ inputs }:
# We specify every overlay here individually so that these can be more
# easily manipulated downstream if needed.
# They are made available at flake.outputs.overlays.${overlayName}
#
# Specifying them this way has the additional benefit of helping enforce
# that each overlay is made order-independent as much as possible.
# (do note, however, that these will be applied in source order)
{
  # This must be the first overlay in the attribute set so that it has the
  # opportunity to fix any potential M1 issues before other overlays happen.
  x86 = _: prev: rec {
    # Make all x86_64-darwin packages available under the x86_64-darwin attribute set
    # so that M1 macs can reference them easily, eg: `pkgs.x86_64-darwin.someIntelOnlyPackage`
    # Because x86_64-darwin passes through the packages transparently if it's not a M1 mac, it doesn't break
    # compatibility with linux.
    x86_64-darwin =
      if prev.stdenv.isDarwin && prev.stdenv.isAarch64 then
        import inputs.nixpkgs
          {
            system = "x86_64-darwin";
            config = { allowUnfree = true; allowUnsupportedSystem = true; };
          }
      else prev;

    # Override broken packages that we use with the intel versions on M1 macs
    inherit (x86_64-darwin) clj-kondo zprint;
  };
  # Force the JDK11 to be used everywhere.
  jdk = _: prev: { jdk = prev.openjdk11; };
  # Make explicit that we use node 16.
  nodejs = _: prev: rec {
    nodejs = prev.nodejs-16_x;
    yarn = prev.yarn.override { inherit nodejs; };
  };
  # This prevents issues with the system clang getting overridden which
  # breaks macOS's reliance on magical global state.
  # (In concrete terms: if you don't specify this, xcode breaks unless you
  # put xcode into nix which is an absolute pain in the ass to do. Even
  # then, it breaks occasionally)
  shell = _: prev: {
    mkShell =
      if prev.stdenv.isDarwin then
        prev.mkShell.override { stdenv = prev.stdenvNoCC; }
      else
        prev.mkShell;
  };
  # Make the certs generated by mkcert only valid for one day (to reduce security risk)
  mkcert = _: prev: {
    mkcert = prev.mkcert.overrideAttrs (o: {
      preBuild = (o.preBuild or "") + ''
        substituteInPlace ./cert.go --replace 'AddDate(2, 3, 0)' 'AddDate(0, 0, 1)'
      '';
    });
  };

  repl = final: prev:
    let example = command: desc: ''\n\u001b[33m ${command}\u001b[0m - ${desc}''; in
    {
      repl = final.writeShellScriptBin "repl" ''
        case "$1" in
          "-h"|"--help"|"help")
            printf "%b\n\e[4mUsage\e[0m: \
              ${example "repl" "Loads a basic nix repl with some conveniences added."} \
              ${example "repl /path/to/flake.nix" "Loads specified flake."} \
              ${example "repl ." "Loads the flake.nix in the current directory."}\n"
          ;;
          *)
            if [ -z "$1" ]; then
              nix repl ${../../repl.nix}
            else
              nix repl --arg flakePath $(${final.coreutils}/bin/readlink -f $1 | ${final.gnused}/bin/sed 's|/flake.nix||') ${../../repl.nix}
            fi
          ;;
        esac
      '';
    };

  base-packages = _: prev: {
    pre-commit-hooks = prev.lib.mach-nix.${prev.system}.mkPython { python = "python39"; requirements = "pre-commit-hooks"; };
  };
}
